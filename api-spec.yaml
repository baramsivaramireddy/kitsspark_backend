openapi: 3.0.0
info: 
  title: Sample API
  description: This is the description of the API 
  version: "1"

servers:
  - url: http://localhost:3001
    description: Local development
  - url: https://backend-sandy-eta.vercel.app

tags:
  - name: common
  - name: user
  - name: upload


paths:
  /health-check:
    get:
      tags:
        - common
      responses:
        200:
          description: Everything is good
        500:
          description: Something bad happened

  /api/user/signup:
    post:
      summary: Signup a new user
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserSignup'
      responses:
        '201':
          description: Created
        '400':
          description: User already exists or invalid data
        '404':
          description: Role not found
        '500':
          description: Internal Server Error

  /api/user/login:
    post:
      summary: Login and generate JWT token
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Invalid credentials
        '500':
          description: Internal Server Error

  /api/user:
    post:
      summary: Create a new user
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: Created
        '400':
          description: User already exists or invalid data
        '404':
          description: Role not found
        '500':
          description: Internal Server Error
    get:
      summary: Get all users
      tags:
        - user
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/user/{id}:
    get:
      summary: Get a user by ID
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        '500':
          description: Internal Server Error

    put:
      summary: Update a user by ID
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: Updated successfully
        '404':
          description: User not found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a user by ID
      tags:
        - user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted successfully
        '404':
          description: User not found
        '500':
          description: Internal Server Error
  /api/upload:
    post:
      tags:
        - upload
      summary: Upload a file to Amazon S3
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: File uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message
                  location:
                    type: string
                    description: URL of the uploaded file on S3
        '400':
          description: Bad Request - No file uploaded
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message


  /api/role:
    post:
      summary: Create a new role
      tags:
        - role
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '201':
          description: Created
        '422':
          description: Invalid data
        '500':
          description: Internal Server Error

    get:
      summary: Get all roles
      tags:
        - role
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Role'
        '500':
          description: Internal Server Error

  /api/role/{id}:
    get:
      summary: Get a role by ID
      tags:
        - role
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Role'
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    put:
      summary: Update a role by ID
      tags:
        - role
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Role'
      responses:
        '200':
          description: Updated successfully
        '404':
          description: Not Found
        '500':
          description: Internal Server Error

    delete:
      summary: Delete a role by ID
      tags:
        - role
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Deleted successfully
        '404':
          description: Not Found
        '500':
          description: Internal Server Error
components:
  schemas:

    Role:
      type: object
      properties:
        name:
          type: string
          description: Name of the role
    UserSignup:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
        email:
          type: string
          description: Email of the user
        password:
          type: string
          description: Password of the user
        phoneNumber:
          type: string
          description: Phone number of the user
        roleId:
          type: string
          description: ID of the role for the user

    UserLogin:
      type: object
      properties:
        email:
          type: string
          description: Email of the user
        password:
          type: string
          description: Password of the user

    UserCreate:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
        email:
          type: string
          description: Email of the user
        password:
          type: string
          description: Password of the user
       
        roleId:
          type: string
          description: ID of the role for the user

    UserUpdate:
      type: object
      properties:
        name:
          type: string
          description: Updated name of the user
        email:
          type: string
          description: Updated email of the user
        password:
          type: string
          description: Updated password of the user
       
        roleId:
          type: string
          description: Updated ID of the role for the user

    User:
      type: object
      properties:
        _id:
          type: string
          description: ID of the user
        name:
          type: string
          description: Name of the user
        email:
          type: string
          description: Email of the user
        password:
          type: string
          description: Password of the user
        phoneNumber:
          type: string
          description: Phone number of the user
        role:
          $ref: '#/components/schemas/Role'